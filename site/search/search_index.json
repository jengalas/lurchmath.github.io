{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Lurch Project Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback. Current status The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here! Documentation Warning We are just beginning to write documentation, but you can find a tutorial online here . New bug fixes, new features, and new documentation arrive almost every day. Expect a more stable release in late spring of 2024. Potential new contributors can check out the new app's GitHub repository here . Other tools The Lurch Deductive Engine (LDE) is the set of data structures and algorithms used under the hood to validate proofs We may later incorporate this JavaScript implementation of the Earley parsing algorithm to allow users to customize the notation used in the app, but that remains uncertain. Old versions of our work are archived here .","title":"Home"},{"location":"#the-lurch-project","text":"Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback.","title":"The Lurch Project"},{"location":"#current-status","text":"The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here!","title":"Current status"},{"location":"#documentation","text":"Warning We are just beginning to write documentation, but you can find a tutorial online here . New bug fixes, new features, and new documentation arrive almost every day. Expect a more stable release in late spring of 2024. Potential new contributors can check out the new app's GitHub repository here .","title":"Documentation"},{"location":"#other-tools","text":"The Lurch Deductive Engine (LDE) is the set of data structures and algorithms used under the hood to validate proofs We may later incorporate this JavaScript implementation of the Earley parsing algorithm to allow users to customize the notation used in the app, but that remains uncertain. Old versions of our work are archived here .","title":"Other tools"},{"location":"about/","text":"About Lurch See the main page for a description of the software's purpose. Authors The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update. Contributors The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"About"},{"location":"about/#about-lurch","text":"See the main page for a description of the software's purpose.","title":"About Lurch"},{"location":"about/#authors","text":"The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update.","title":"Authors"},{"location":"about/#contributors","text":"The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"Contributors"},{"location":"lurch-notation/","text":"Lurch notation reference Warning: The notation below is not intended for everyone Our eventual plan for Lurch is that every instructor can choose the syntax and notation that makes the most sense for their students. (Furthermore, instructors who want students to use an equation editor only can already do that.) Consequently, the notation documented below is NOT the permanent notation that our application will always use. In fact, right now, it's customized particularly to the needs of the one and only instructor testing Lurch in an actual course! Warning: The notation below will probably change often While it was inspired by AsciiMath , and we will try to stay consistent with that standard when possible, some of the unique notation below may change over time, in response to in-class testing, new needs, and feedback from students and potential new adopters. Warning: The notation below is not fully documented Not every symbol or expression below has a self-evident meaning. Our documentation for this project has just begun, and we aim to make it more comprehensive with time. The reader will also note that many meanings have more than one way to type them. Especially when a Lurch notation expression uses unicode characters, there is typically a plain-text alternative, to make it easier to type. Logic Lurch notation Meaning P and Q \\(P\\text{ and }Q\\) P\u2227Q \\(P\\text{ and }Q\\) P or Q \\(P\\text{ or }Q\\) P\u2228Q \\(P\\text{ or }Q\\) not P \\(\\neg P\\) \u00acP \\(\\neg P\\) P implies Q \\(P\\Rightarrow Q\\) P\u21d2Q \\(P\\Rightarrow Q\\) P iff Q \\(P\\Leftrightarrow Q\\) P\u21d4Q \\(P\\Leftrightarrow Q\\) contradiction \\(\\rightarrow\\leftarrow\\) \u2192\u2190 \\(\\rightarrow\\leftarrow\\) Quantifiers and bindings Lurch notation Meaning forall x.x<x+1 \\(\\forall x, x<x+1\\) for all x.x<x+1 \\(\\forall x, x<x+1\\) \u2200x.x<x+1 \\(\\forall x, x<x+1\\) exists x.x=2 cdot x \\(\\exists x, x=2x\\) \u2203x.x=2\u22c5x \\(\\exists x, x=2x\\) exists unique x.x=2 cdot x \\(\\exists ! x, x=2x\\) \u2203!x.x=2\u22c5x \\(\\exists ! x, x=2x\\) x.x+2 \\(x, x+1\\) x\u21a6x+2 \\(x, x+1\\) Algebraic expressions Lurch notation Meaning (x) \\(\\left(x\\right)\\) x+y \\(x+y\\) 2+x+y \\(2+x+y\\) -x \\(-x\\) 1-x \\(1-x\\) x*y \\(x y\\) x cdot y \\(x y\\) x\u22c5y \\(x y\\) 2*x*y \\(2 x y\\) 2 cdot x cdot y \\(2 x y\\) 2\u22c5x\u22c5y \\(2 x y\\) 2*3*x \\(2\\cdot 3 x\\) 2 cdot 3 cdot x \\(2\\cdot 3 x\\) 2\u22c53\u22c5x \\(2\\cdot 3 x\\) 1/x \\(\\frac{1}{x}\\) 2*1/x*y \\(2\\frac{1}{x}y\\) (2*1)/(x*y) \\(\\frac{(2\\cdot 1)}{(xy)}\\) x^2 \\(x^2\\) x factorial \\(x!\\) x\uff01 \\(x!\\) Set Theory Lurch notation Meaning x in A \\(x\\in A\\) x\u2208A \\(x\\in A\\) x notin A \\(x\\notin A\\) x\u2209A \\(x\\notin A\\) A subset B \\(A\\subseteq B\\) A subseteq B \\(A\\subseteq B\\) A\u2286B \\(A\\subseteq B\\) A cup B \\(A\\cup B\\) A union B \\(A\\cup B\\) A\u222aB \\(A\\cup B\\) A cap B \\(A\\cap B\\) A intersect B \\(A\\cap B\\) A\u2229B \\(A\\cap B\\) A setminus B \\(A\\setminus B\\) A\u2216B \\(A\\setminus B\\) A complement \\(A^\\circ\\) A\u00b0 \\(A^\\circ\\) f:A\u2192B \\(f\\colon A\\to B\\) f(x) \\(f\\left(x\\right)\\) g circ f \\(g\\circ f\\) g\u2218f \\(g\\circ f\\) A times B \\(A\\times B\\) A\u00d7B \\(A\\times B\\) \u27e8x,y\u27e9 \\(\\langle x,y \\rangle\\) Relations Lurch notation Meaning x < 0 \\(x<0\\) x lt 0 \\(x<0\\) x leq 0 \\(x\\leq 0\\) x \u2264 0 \\(x\\leq 0\\) x neq 0 \\(x\\neq 0\\) x ne 0 \\(x\\neq 0\\) x\u22600 \\(x\\neq 0\\) m | n \\(m\\mid n\\) m divides n \\(m\\mid n\\) a\u2248b mod m \\(a\\underset{m}{\\equiv}b\\) x~y \\(x\\sim y\\) x~y~z \\(x\\sim y\\sim z\\) x=y \\(x=y\\) x=y=z \\(x=y=z\\) X loves Y \\(X\\text{ loves }Y\\) X is Y \\(X\\text{ is }Y\\) X is an Y \\(X\\text{ is }Y\\) X is a Y \\(X\\text{ is }Y\\) P is a partition of A \\(P\\text{ is a partition of }A\\) '~' is an equivalence relation \\(\\sim\\text{ is equivalence relation}\\) [a] \\(\\left[a\\right]\\) [a,~] \\(\\left[a\\right]_{\\sim}\\) '~' is a strict partial order \\(\\sim\\text{ is strict partial order}\\) '~' is a partial order \\(\\sim\\text{ is partial order}\\) '~' is a total order \\(\\sim\\text{ is total order}\\) Assumptions and Declarations (case insensitive) Lurch notation Meaning Assume P \\(\\text{Assume }P\\) Given P \\(\\text{Assume }P\\) Suppose P \\(\\text{Assume }P\\) If P \\(\\text{Assume }P\\) :P \\(\\text{Assume }P\\) Let x \\(\\text{Let }x\\) Let x be such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) Let x such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) f(c)=0 for some c \\(f(c)=0\\text{ for some }c\\) Declare is 0 + cos \\(\\text{Declare is, 0, +, and cos}\\) Miscellaneous Lurch notation Meaning f\u207b(x) \\(f^-\\left(x\\right)\\) f recip(x) \\(f^-\\left(x\\right)\\) f inv(x) \\(f^-\\left(x\\right)\\) x recip \\(x^-\\) x inv \\(x^-\\) x\u207b \\(x^-\\) \u03bbP(k) \\(\\lambda{P}(k)\\)","title":"Lurch notation reference"},{"location":"lurch-notation/#lurch-notation-reference","text":"Warning: The notation below is not intended for everyone Our eventual plan for Lurch is that every instructor can choose the syntax and notation that makes the most sense for their students. (Furthermore, instructors who want students to use an equation editor only can already do that.) Consequently, the notation documented below is NOT the permanent notation that our application will always use. In fact, right now, it's customized particularly to the needs of the one and only instructor testing Lurch in an actual course! Warning: The notation below will probably change often While it was inspired by AsciiMath , and we will try to stay consistent with that standard when possible, some of the unique notation below may change over time, in response to in-class testing, new needs, and feedback from students and potential new adopters. Warning: The notation below is not fully documented Not every symbol or expression below has a self-evident meaning. Our documentation for this project has just begun, and we aim to make it more comprehensive with time. The reader will also note that many meanings have more than one way to type them. Especially when a Lurch notation expression uses unicode characters, there is typically a plain-text alternative, to make it easier to type.","title":"Lurch notation reference"},{"location":"lurch-notation/#logic","text":"Lurch notation Meaning P and Q \\(P\\text{ and }Q\\) P\u2227Q \\(P\\text{ and }Q\\) P or Q \\(P\\text{ or }Q\\) P\u2228Q \\(P\\text{ or }Q\\) not P \\(\\neg P\\) \u00acP \\(\\neg P\\) P implies Q \\(P\\Rightarrow Q\\) P\u21d2Q \\(P\\Rightarrow Q\\) P iff Q \\(P\\Leftrightarrow Q\\) P\u21d4Q \\(P\\Leftrightarrow Q\\) contradiction \\(\\rightarrow\\leftarrow\\) \u2192\u2190 \\(\\rightarrow\\leftarrow\\)","title":"Logic"},{"location":"lurch-notation/#quantifiers-and-bindings","text":"Lurch notation Meaning forall x.x<x+1 \\(\\forall x, x<x+1\\) for all x.x<x+1 \\(\\forall x, x<x+1\\) \u2200x.x<x+1 \\(\\forall x, x<x+1\\) exists x.x=2 cdot x \\(\\exists x, x=2x\\) \u2203x.x=2\u22c5x \\(\\exists x, x=2x\\) exists unique x.x=2 cdot x \\(\\exists ! x, x=2x\\) \u2203!x.x=2\u22c5x \\(\\exists ! x, x=2x\\) x.x+2 \\(x, x+1\\) x\u21a6x+2 \\(x, x+1\\)","title":"Quantifiers and bindings"},{"location":"lurch-notation/#algebraic-expressions","text":"Lurch notation Meaning (x) \\(\\left(x\\right)\\) x+y \\(x+y\\) 2+x+y \\(2+x+y\\) -x \\(-x\\) 1-x \\(1-x\\) x*y \\(x y\\) x cdot y \\(x y\\) x\u22c5y \\(x y\\) 2*x*y \\(2 x y\\) 2 cdot x cdot y \\(2 x y\\) 2\u22c5x\u22c5y \\(2 x y\\) 2*3*x \\(2\\cdot 3 x\\) 2 cdot 3 cdot x \\(2\\cdot 3 x\\) 2\u22c53\u22c5x \\(2\\cdot 3 x\\) 1/x \\(\\frac{1}{x}\\) 2*1/x*y \\(2\\frac{1}{x}y\\) (2*1)/(x*y) \\(\\frac{(2\\cdot 1)}{(xy)}\\) x^2 \\(x^2\\) x factorial \\(x!\\) x\uff01 \\(x!\\)","title":"Algebraic expressions"},{"location":"lurch-notation/#set-theory","text":"Lurch notation Meaning x in A \\(x\\in A\\) x\u2208A \\(x\\in A\\) x notin A \\(x\\notin A\\) x\u2209A \\(x\\notin A\\) A subset B \\(A\\subseteq B\\) A subseteq B \\(A\\subseteq B\\) A\u2286B \\(A\\subseteq B\\) A cup B \\(A\\cup B\\) A union B \\(A\\cup B\\) A\u222aB \\(A\\cup B\\) A cap B \\(A\\cap B\\) A intersect B \\(A\\cap B\\) A\u2229B \\(A\\cap B\\) A setminus B \\(A\\setminus B\\) A\u2216B \\(A\\setminus B\\) A complement \\(A^\\circ\\) A\u00b0 \\(A^\\circ\\) f:A\u2192B \\(f\\colon A\\to B\\) f(x) \\(f\\left(x\\right)\\) g circ f \\(g\\circ f\\) g\u2218f \\(g\\circ f\\) A times B \\(A\\times B\\) A\u00d7B \\(A\\times B\\) \u27e8x,y\u27e9 \\(\\langle x,y \\rangle\\)","title":"Set Theory"},{"location":"lurch-notation/#relations","text":"Lurch notation Meaning x < 0 \\(x<0\\) x lt 0 \\(x<0\\) x leq 0 \\(x\\leq 0\\) x \u2264 0 \\(x\\leq 0\\) x neq 0 \\(x\\neq 0\\) x ne 0 \\(x\\neq 0\\) x\u22600 \\(x\\neq 0\\) m | n \\(m\\mid n\\) m divides n \\(m\\mid n\\) a\u2248b mod m \\(a\\underset{m}{\\equiv}b\\) x~y \\(x\\sim y\\) x~y~z \\(x\\sim y\\sim z\\) x=y \\(x=y\\) x=y=z \\(x=y=z\\) X loves Y \\(X\\text{ loves }Y\\) X is Y \\(X\\text{ is }Y\\) X is an Y \\(X\\text{ is }Y\\) X is a Y \\(X\\text{ is }Y\\) P is a partition of A \\(P\\text{ is a partition of }A\\) '~' is an equivalence relation \\(\\sim\\text{ is equivalence relation}\\) [a] \\(\\left[a\\right]\\) [a,~] \\(\\left[a\\right]_{\\sim}\\) '~' is a strict partial order \\(\\sim\\text{ is strict partial order}\\) '~' is a partial order \\(\\sim\\text{ is partial order}\\) '~' is a total order \\(\\sim\\text{ is total order}\\)","title":"Relations"},{"location":"lurch-notation/#assumptions-and-declarations-case-insensitive","text":"Lurch notation Meaning Assume P \\(\\text{Assume }P\\) Given P \\(\\text{Assume }P\\) Suppose P \\(\\text{Assume }P\\) If P \\(\\text{Assume }P\\) :P \\(\\text{Assume }P\\) Let x \\(\\text{Let }x\\) Let x be such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) Let x such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) f(c)=0 for some c \\(f(c)=0\\text{ for some }c\\) Declare is 0 + cos \\(\\text{Declare is, 0, +, and cos}\\)","title":"Assumptions and Declarations (case insensitive)"},{"location":"lurch-notation/#miscellaneous","text":"Lurch notation Meaning f\u207b(x) \\(f^-\\left(x\\right)\\) f recip(x) \\(f^-\\left(x\\right)\\) f inv(x) \\(f^-\\left(x\\right)\\) x recip \\(x^-\\) x inv \\(x^-\\) x\u207b \\(x^-\\) \u03bbP(k) \\(\\lambda{P}(k)\\)","title":"Miscellaneous"},{"location":"old-versions/","text":"Old versions of Lurch Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order. Desktop application, 2008--2014 Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014 Lurch Web Platform, c2017 Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Old versions of Lurch"},{"location":"old-versions/#old-versions-of-lurch","text":"Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order.","title":"Old versions of Lurch"},{"location":"old-versions/#desktop-application-2008-2014","text":"Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014","title":"Desktop application, 2008--2014"},{"location":"old-versions/#lurch-web-platform-c2017","text":"Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Lurch Web Platform, c2017"},{"location":"tut-01-word-processor/","text":"Lurch is a word processor It is also much more, but it is a word processor. While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on. Under the hood Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation. How do I add some math? See the next page in the tutorial!","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#lurch-is-a-word-processor","text":"","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#it-is-also-much-more-but-it-is-a-word-processor","text":"While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on.","title":"It is also much more, but it is a word processor."},{"location":"tut-01-word-processor/#under-the-hood","text":"Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation.","title":"Under the hood"},{"location":"tut-01-word-processor/#how-do-i-add-some-math","text":"See the next page in the tutorial!","title":"How do I add some math?"},{"location":"tut-02-expository-math/","text":"Adding mathematical content The simplest way to enter mathematical content into Lurch is to use an equation editor (powered by MathLive ). For users who are familiar with LaTeX, we have that option as well, but let's start with the simpler method. Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, enter some math using the equation editor. For example, you might type 1-x^2 and watch it become \\(1-x^2\\) . (If you want a math keyboard, open one by clicking the keyboard icon in the equation editor.) Click OK to place your math into the document. Editing math you've added To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead. For power users Users familiar with LaTeX may want to use that notation instead of an equation editor. (Other users can skip this section.) We have a setting that lets you choose the type of interface you would like. Beginner mode is the equation editor you saw in the exercise above. Intermediate mode shows a LaTeX input box and the equation editor, and you can use either one, and they stay in sync. Advanced mode shows only the LaTeX input box and a typeset preview, with minimal styling. The syncing of LaTeX and the equation editor in intermediate mode is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so. Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expository math editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Repeat the exercise above to try out the new intermediate-mode editor for expository math content. Try this exercise again, but use Advanced mode, then switch the setting to the one you like best. Is Lurch grading my math? Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#adding-mathematical-content","text":"The simplest way to enter mathematical content into Lurch is to use an equation editor (powered by MathLive ). For users who are familiar with LaTeX, we have that option as well, but let's start with the simpler method. Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, enter some math using the equation editor. For example, you might type 1-x^2 and watch it become \\(1-x^2\\) . (If you want a math keyboard, open one by clicking the keyboard icon in the equation editor.) Click OK to place your math into the document.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#editing-math-youve-added","text":"To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead.","title":"Editing math you've added"},{"location":"tut-02-expository-math/#for-power-users","text":"Users familiar with LaTeX may want to use that notation instead of an equation editor. (Other users can skip this section.) We have a setting that lets you choose the type of interface you would like. Beginner mode is the equation editor you saw in the exercise above. Intermediate mode shows a LaTeX input box and the equation editor, and you can use either one, and they stay in sync. Advanced mode shows only the LaTeX input box and a typeset preview, with minimal styling. The syncing of LaTeX and the equation editor in intermediate mode is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so. Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expository math editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Repeat the exercise above to try out the new intermediate-mode editor for expository math content. Try this exercise again, but use Advanced mode, then switch the setting to the one you like best.","title":"For power users"},{"location":"tut-02-expository-math/#is-lurch-grading-my-math","text":"Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Is Lurch grading my math?"},{"location":"tut-03-meaningful-math/","text":"Meaningful mathematics Two types of mathematical content Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\" Why two types of math? Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. Important: Recognizing meaningful content You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you don't want to see it) in later parts of this tutorial. For power users Just as expository math expressions can be entered using an equation editor or LaTeX notation, meaningful mathematics can also be entered in more than one way. (Again, users happy with the equation editor can skip this section.) Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expression editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Much like intermediate mode for editing expository math content allows you to use the equation editor or LaTeX notation, the intermediate mode for editing meaningful math expressions allows you to use the equation editor or a custom Lurch notation for meaningful expressions. Warning: This is not LaTeX LaTeX was designed for presentation, not meaning. The notation used for meaningful expressions in Lurch is not LaTeX, but a derivative of AsciiMath specific to the Lurch project. We hope to make this notation customizable in a future version of Lurch, but in this early phase of the project it is not. You can read more about the Lurch notation here. Or you can choose to use the equation editor instead. Like with expository math, meaningful math has three editor modes, and you can choose the one you like best: Beginner mode is the default mode and uses just an equation editor widget. Intermediate mode incorporates both the equation editor for those who wish to use it and a text box that uses Lurch notation . Advanced mode is for those who have mastered Lurch notation, and shows a very minimalist dialog that aims to let you stay in the flow of your work. Is lurch grading my math now? No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#meaningful-mathematics","text":"","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#two-types-of-mathematical-content","text":"Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\"","title":"Two types of mathematical content"},{"location":"tut-03-meaningful-math/#why-two-types-of-math","text":"Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. Important: Recognizing meaningful content You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you don't want to see it) in later parts of this tutorial.","title":"Why two types of math?"},{"location":"tut-03-meaningful-math/#for-power-users","text":"Just as expository math expressions can be entered using an equation editor or LaTeX notation, meaningful mathematics can also be entered in more than one way. (Again, users happy with the equation editor can skip this section.) Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expression editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Much like intermediate mode for editing expository math content allows you to use the equation editor or LaTeX notation, the intermediate mode for editing meaningful math expressions allows you to use the equation editor or a custom Lurch notation for meaningful expressions. Warning: This is not LaTeX LaTeX was designed for presentation, not meaning. The notation used for meaningful expressions in Lurch is not LaTeX, but a derivative of AsciiMath specific to the Lurch project. We hope to make this notation customizable in a future version of Lurch, but in this early phase of the project it is not. You can read more about the Lurch notation here. Or you can choose to use the equation editor instead. Like with expository math, meaningful math has three editor modes, and you can choose the one you like best: Beginner mode is the default mode and uses just an equation editor widget. Intermediate mode incorporates both the equation editor for those who wish to use it and a text box that uses Lurch notation . Advanced mode is for those who have mastered Lurch notation, and shows a very minimalist dialog that aims to let you stay in the flow of your work.","title":"For power users"},{"location":"tut-03-meaningful-math/#is-lurch-grading-my-math-now","text":"No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Is lurch grading my math now?"},{"location":"tut-04-validation/","text":"Checking your reasoning Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! Passing your first quiz The document above contains two meaningful mathematical expressions. You know that they are meaningful (not just expository) because of the blue borders. But Lurch has not yet given any indication of whether the (very simple!) reasoning in the above document is correct. Let's make that happen. Exercise: Ask for a grade In the document shown above, click the Document menu and choose \"Check my reasoning.\" You should find that the second meaningful mathematics gets a green check mark from Lurch, your virtual grader. Hover your mouse pointer over that green check mark. You should see Lurch give you some small positive feedback (\"Good work!\"). Throwing the game Let's make a mistake to be sure that Lurch isn't practicing grade inflation. If we do something mathematically invalid, it ought to make an error. Exercise: Oops In the same document you see above, click the second expression to edit it. Change its meaning from \\(x<0\\) to \\(y<0\\) and click OK. Note that all feedback has disappeared from your document. When you make an edit, Lurch is aware that its previous feedback may no longer apply, and it erases it. Ask Lurch to check your reasoning again, and then use your mouse to hover over the feedback icon for more information. You'll notice that Lurch doesn't tell you that you're wrong. This is appropriate because Lurch doesn't want to jump to conclusions. After all, maybe \\(y<0\\) and maybe it isn't--we haven't specified! So Lurch just lets you know that you haven't provided any evidence to support this conclusion. Whether it's true or false is another matter--Lurch is just reading the evidence you've provided (or failed to provide). Questions? This exercise may have raised many questions in your mind, such as how the first expression counts as an assumption, why it didn't get any feedback attached to it, and what are the limits of Lurch's mathematical knowledge. We will cover all of those things in this tutorial, one at a time. Let's start with learning about assumptions.","title":"Checking your reasoning"},{"location":"tut-04-validation/#checking-your-reasoning","text":"Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`!","title":"Checking your reasoning"},{"location":"tut-04-validation/#passing-your-first-quiz","text":"The document above contains two meaningful mathematical expressions. You know that they are meaningful (not just expository) because of the blue borders. But Lurch has not yet given any indication of whether the (very simple!) reasoning in the above document is correct. Let's make that happen. Exercise: Ask for a grade In the document shown above, click the Document menu and choose \"Check my reasoning.\" You should find that the second meaningful mathematics gets a green check mark from Lurch, your virtual grader. Hover your mouse pointer over that green check mark. You should see Lurch give you some small positive feedback (\"Good work!\").","title":"Passing your first quiz"},{"location":"tut-04-validation/#throwing-the-game","text":"Let's make a mistake to be sure that Lurch isn't practicing grade inflation. If we do something mathematically invalid, it ought to make an error. Exercise: Oops In the same document you see above, click the second expression to edit it. Change its meaning from \\(x<0\\) to \\(y<0\\) and click OK. Note that all feedback has disappeared from your document. When you make an edit, Lurch is aware that its previous feedback may no longer apply, and it erases it. Ask Lurch to check your reasoning again, and then use your mouse to hover over the feedback icon for more information. You'll notice that Lurch doesn't tell you that you're wrong. This is appropriate because Lurch doesn't want to jump to conclusions. After all, maybe \\(y<0\\) and maybe it isn't--we haven't specified! So Lurch just lets you know that you haven't provided any evidence to support this conclusion. Whether it's true or false is another matter--Lurch is just reading the evidence you've provided (or failed to provide).","title":"Throwing the game"},{"location":"tut-04-validation/#questions","text":"This exercise may have raised many questions in your mind, such as how the first expression counts as an assumption, why it didn't get any feedback attached to it, and what are the limits of Lurch's mathematical knowledge. We will cover all of those things in this tutorial, one at a time. Let's start with learning about assumptions.","title":"Questions?"},{"location":"tut-05-assumptions/","text":"Making assumptions Let's take a second look at the example document below, which you saw already in the previous tutorial . Why did Lurch put positive feedback on the second expression, but not the first? Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! In mathematics, most facts are not proven in isolation, but only after making certain assumptions. A theorem will say, \"If such-and-such a fact, then we know that some other facts.\" This is why in a geometry class, many textbooks let a student justify a line in a proof with the word \"given.\" Lurch has support for this essential piece of mathematical reasoning. The user interface for assumptions To make an expression into an assumption, you use a different technique depending on which editing mode you prefer. (Recall the three editing modes introduced at the end of an earlier tutorial .) In beginner mode, there is a checkbox in the expression editing dialog that says \"Assumption\" and is unchecked by default. Check it to make an expression into an assumption; leave it unchecked to have your expression treated as an ordinary statement. In intermediate mode, the top of the expression editing dialog has a drop-down menu for choosing the kind of content you're inserting. One of the options is \"Assumption,\" in contrast to the default \"Statement.\" (There are many other options on that drop-down that we will come to in later tutorial pages.) In advanced mode, you must include in the input you provide a word that signals that the content is an assumption. For isntance, instead of typing x<0 into the dialog box, you can type Assume x<0 . For a full list of the words that signal \"assumption,\" see the Lurch notation reference page . Feedback about assumptions Lurch checks your reasoning to see if any of the steps in it are invalid. But in mathematics, you're allowed to assume whatever you want. (Some assumptions are more useful or strategic than others, but no assumption is an example of invalid reasoning.) Consequently, Lurch does not mark assumptions as right or wrong; it just doesn't mark them at all. You can see this in the document shown at the top of this page. Exercise: Make/break assumptions Edit the document at the top of this page. Change the first expression so that it is no longer an assumption, and ask Lurch to check your reasoning. Does its response make sense to you? (If not, see the explanation below.) Try toggling the \"assumption\" status of that same expression using the other editing modes as well (beginner, intermediate, and advanced). Keeping mistakes local When your document has two copies of the expression \\(x<0\\) , and neither one is marked as an assumption, Lurch grades the first one as unjustified and the second one as justified. The reason for this is that Lurch does not propagate your errors throughout your document, but tries to keep them as contained as possible. To explain this better, consider the following example. Example Betsy is a geometry student who wrote a 10-line proof and submitted it for homework. All the work is correct, except for line 4, which is not properly justified. How many points does Betsy get for this homework problem? Perhaps some geometry teachers would give Betsy 9 out of 10 points, because 9 lines were correct and 10 were incorrect. Perhaps other teachers would give her 3 out of 10 points, because the first 3 lines were correct, but everything after that is suspect, because lines 5-10 might rely on the invalid line 4. Lurch tries to be as generous as possible. If one of your statements is not sufficiently justified, Lurch marks it as such, but later statements are still free to rely on the unjustified one. Thus a proof with even one unjustified statement is not a complete proof, even if all the statements but one have green check marks on them. We chose to have Lurch behave this way because it permits students to assemble a proof in any order. For example, many instructors teach students to work \"from the outside in,\" building some of the starting lines and some of the concluding lines for a proof, before filling in one or two insightful steps in the middle that connects it all together. For example, we will later see examples of proofs like the following, and Lurch will grade most of the work as correct. Example Let \\(x\\) be arbitrary, then assume \\(x>0\\) . Consequenly, \\(x^2+1>0\\) . (Here's the part I need to fill in before submitting my homework!) My goal is to show that \\(x^2+k>p\\) . Once I've shown that, I can conclude that for any \\(x>0\\) , \\(x^2+k>p\\) . In such a proof, Lurch will mark every statement other than the first \\(x^2+k>p\\) correct, because only that one line is missing its justification. This allows students to get positive feedback about their work en route to a complete proof, even if they don't choose to write it in the order it will eventually be read. Speaking of proofs... ...we haven't actually done any yet! Let's do a proof now!","title":"Making assumptions"},{"location":"tut-05-assumptions/#making-assumptions","text":"Let's take a second look at the example document below, which you saw already in the previous tutorial . Why did Lurch put positive feedback on the second expression, but not the first? Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! In mathematics, most facts are not proven in isolation, but only after making certain assumptions. A theorem will say, \"If such-and-such a fact, then we know that some other facts.\" This is why in a geometry class, many textbooks let a student justify a line in a proof with the word \"given.\" Lurch has support for this essential piece of mathematical reasoning.","title":"Making assumptions"},{"location":"tut-05-assumptions/#the-user-interface-for-assumptions","text":"To make an expression into an assumption, you use a different technique depending on which editing mode you prefer. (Recall the three editing modes introduced at the end of an earlier tutorial .) In beginner mode, there is a checkbox in the expression editing dialog that says \"Assumption\" and is unchecked by default. Check it to make an expression into an assumption; leave it unchecked to have your expression treated as an ordinary statement. In intermediate mode, the top of the expression editing dialog has a drop-down menu for choosing the kind of content you're inserting. One of the options is \"Assumption,\" in contrast to the default \"Statement.\" (There are many other options on that drop-down that we will come to in later tutorial pages.) In advanced mode, you must include in the input you provide a word that signals that the content is an assumption. For isntance, instead of typing x<0 into the dialog box, you can type Assume x<0 . For a full list of the words that signal \"assumption,\" see the Lurch notation reference page .","title":"The user interface for assumptions"},{"location":"tut-05-assumptions/#feedback-about-assumptions","text":"Lurch checks your reasoning to see if any of the steps in it are invalid. But in mathematics, you're allowed to assume whatever you want. (Some assumptions are more useful or strategic than others, but no assumption is an example of invalid reasoning.) Consequently, Lurch does not mark assumptions as right or wrong; it just doesn't mark them at all. You can see this in the document shown at the top of this page. Exercise: Make/break assumptions Edit the document at the top of this page. Change the first expression so that it is no longer an assumption, and ask Lurch to check your reasoning. Does its response make sense to you? (If not, see the explanation below.) Try toggling the \"assumption\" status of that same expression using the other editing modes as well (beginner, intermediate, and advanced).","title":"Feedback about assumptions"},{"location":"tut-05-assumptions/#keeping-mistakes-local","text":"When your document has two copies of the expression \\(x<0\\) , and neither one is marked as an assumption, Lurch grades the first one as unjustified and the second one as justified. The reason for this is that Lurch does not propagate your errors throughout your document, but tries to keep them as contained as possible. To explain this better, consider the following example. Example Betsy is a geometry student who wrote a 10-line proof and submitted it for homework. All the work is correct, except for line 4, which is not properly justified. How many points does Betsy get for this homework problem? Perhaps some geometry teachers would give Betsy 9 out of 10 points, because 9 lines were correct and 10 were incorrect. Perhaps other teachers would give her 3 out of 10 points, because the first 3 lines were correct, but everything after that is suspect, because lines 5-10 might rely on the invalid line 4. Lurch tries to be as generous as possible. If one of your statements is not sufficiently justified, Lurch marks it as such, but later statements are still free to rely on the unjustified one. Thus a proof with even one unjustified statement is not a complete proof, even if all the statements but one have green check marks on them. We chose to have Lurch behave this way because it permits students to assemble a proof in any order. For example, many instructors teach students to work \"from the outside in,\" building some of the starting lines and some of the concluding lines for a proof, before filling in one or two insightful steps in the middle that connects it all together. For example, we will later see examples of proofs like the following, and Lurch will grade most of the work as correct. Example Let \\(x\\) be arbitrary, then assume \\(x>0\\) . Consequenly, \\(x^2+1>0\\) . (Here's the part I need to fill in before submitting my homework!) My goal is to show that \\(x^2+k>p\\) . Once I've shown that, I can conclude that for any \\(x>0\\) , \\(x^2+k>p\\) . In such a proof, Lurch will mark every statement other than the first \\(x^2+k>p\\) correct, because only that one line is missing its justification. This allows students to get positive feedback about their work en route to a complete proof, even if they don't choose to write it in the order it will eventually be read.","title":"Keeping mistakes local"},{"location":"tut-05-assumptions/#speaking-of-proofs","text":"...we haven't actually done any yet! Let's do a proof now!","title":"Speaking of proofs..."},{"location":"tut-06-environments/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-06-environments/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07-rules/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07-rules/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07b-metavariables/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07b-metavariables/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-08-document-header/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-08-document-header/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09a-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09a-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09b-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09b-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09c-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09c-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09d-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09d-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tutorial-toc/","text":"Lurch Tutorial This tutorial is for the Lurch application that is online here . Warning The app's documentation is not at all complete yet! It is just beginning! In fact, at this point, there is almost nothing here! There is only this tutorial, and it is far from complete. We are actively developing Lurch daily during Spring 2024, and if you check back often, you will find new documentation arriving regularly. Contents Here is the table of contents for the tutorial. It is a work in progress. Basics Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning The main ingredients Making assumptions Creating and using environments (not yet written---coming soon!) Reading and using rules (not yet written---coming soon!) Hiding and showing rules (not yet written---coming soon!) Your first proofs Part 1: Propositional logic (not yet written---coming soon!) Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Tutorial"},{"location":"tutorial-toc/#lurch-tutorial","text":"This tutorial is for the Lurch application that is online here . Warning The app's documentation is not at all complete yet! It is just beginning! In fact, at this point, there is almost nothing here! There is only this tutorial, and it is far from complete. We are actively developing Lurch daily during Spring 2024, and if you check back often, you will find new documentation arriving regularly.","title":"Lurch Tutorial"},{"location":"tutorial-toc/#contents","text":"Here is the table of contents for the tutorial. It is a work in progress.","title":"Contents"},{"location":"tutorial-toc/#basics","text":"Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning","title":"Basics"},{"location":"tutorial-toc/#the-main-ingredients","text":"Making assumptions Creating and using environments (not yet written---coming soon!) Reading and using rules (not yet written---coming soon!) Hiding and showing rules (not yet written---coming soon!)","title":"The main ingredients"},{"location":"tutorial-toc/#your-first-proofs","text":"Part 1: Propositional logic (not yet written---coming soon!) Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Your first proofs"}]}