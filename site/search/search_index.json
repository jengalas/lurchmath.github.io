{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Lurch Project Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback. Current status The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here! Documentation Warning We are just beginning to write documentation, but you can find a tutorial online here . New bug fixes, new features, and new documentation arrive almost every day. Expect a more stable release in late spring of 2024. Potential new contributors can check out the new app's GitHub repository here . Other tools The Lurch Deductive Engine (LDE) is the set of data structures and algorithms used under the hood to validate proofs We may later incorporate this JavaScript implementation of the Earley parsing algorithm to allow users to customize the notation used in the app, but that remains uncertain. Old versions of our work are archived here .","title":"Home"},{"location":"#the-lurch-project","text":"Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback.","title":"The Lurch Project"},{"location":"#current-status","text":"The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here!","title":"Current status"},{"location":"#documentation","text":"Warning We are just beginning to write documentation, but you can find a tutorial online here . New bug fixes, new features, and new documentation arrive almost every day. Expect a more stable release in late spring of 2024. Potential new contributors can check out the new app's GitHub repository here .","title":"Documentation"},{"location":"#other-tools","text":"The Lurch Deductive Engine (LDE) is the set of data structures and algorithms used under the hood to validate proofs We may later incorporate this JavaScript implementation of the Earley parsing algorithm to allow users to customize the notation used in the app, but that remains uncertain. Old versions of our work are archived here .","title":"Other tools"},{"location":"about/","text":"About Lurch See the main page for a description of the software's purpose. Authors The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update. Contributors The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"About"},{"location":"about/#about-lurch","text":"See the main page for a description of the software's purpose.","title":"About Lurch"},{"location":"about/#authors","text":"The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update.","title":"Authors"},{"location":"about/#contributors","text":"The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"Contributors"},{"location":"old-versions/","text":"Old versions of Lurch Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order. Desktop application, 2008--2014 Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014 Lurch Web Platform, c2017 Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Old versions of Lurch"},{"location":"old-versions/#old-versions-of-lurch","text":"Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order.","title":"Old versions of Lurch"},{"location":"old-versions/#desktop-application-2008-2014","text":"Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014","title":"Desktop application, 2008--2014"},{"location":"old-versions/#lurch-web-platform-c2017","text":"Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Lurch Web Platform, c2017"},{"location":"tut-01-word-processor/","text":"Lurch is a word processor It is also much more, but it is a word processor. While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on. Under the hood Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation. How do I add some math? See the next page in the tutorial!","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#lurch-is-a-word-processor","text":"","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#it-is-also-much-more-but-it-is-a-word-processor","text":"While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on.","title":"It is also much more, but it is a word processor."},{"location":"tut-01-word-processor/#under-the-hood","text":"Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation.","title":"Under the hood"},{"location":"tut-01-word-processor/#how-do-i-add-some-math","text":"See the next page in the tutorial!","title":"How do I add some math?"},{"location":"tut-02-expository-math/","text":"Adding mathematical content The simplest way to enter mathematical content into Lurch is to use either LaTeX notation (for those who know it) or an equation editor (for those unfamiliar with LaTeX). Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, use either the LaTeX input box or the equation editor below it, whichever you prefer. For example, you might type the LaTeX code 1-x^2 to represent \\(1-x^2\\) . Click OK to place your math into the document. Editing math you've added To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead. Staying in sync You have probably noticed that the two input methods stay in sync with one another. As you type LaTeX, it is automatically rendered in the equation editor, and if you use the equation editor, it updates the LaTeX code box as well. This is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so. Is Lurch grading my math? Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#adding-mathematical-content","text":"The simplest way to enter mathematical content into Lurch is to use either LaTeX notation (for those who know it) or an equation editor (for those unfamiliar with LaTeX). Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, use either the LaTeX input box or the equation editor below it, whichever you prefer. For example, you might type the LaTeX code 1-x^2 to represent \\(1-x^2\\) . Click OK to place your math into the document.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#editing-math-youve-added","text":"To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead.","title":"Editing math you've added"},{"location":"tut-02-expository-math/#staying-in-sync","text":"You have probably noticed that the two input methods stay in sync with one another. As you type LaTeX, it is automatically rendered in the equation editor, and if you use the equation editor, it updates the LaTeX code box as well. This is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so.","title":"Staying in sync"},{"location":"tut-02-expository-math/#is-lurch-grading-my-math","text":"Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Is Lurch grading my math?"},{"location":"tut-03-meaningful-math/","text":"Meaningful mathematics Two types of mathematical content Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\" Why two types of math? Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document. Important details about expressions You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you want to) later. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. When adding or editing math expressions, you are not restricted to using only the equation editor. Under the Edit menu, find the Preferences option (all the way at the bottom---you may need to scroll down). In its \"Math content\" tab, you can select which type of expression editor to use, from these options: Beginner: the default you used above, a standard equation editor widget (thanks to the open-source tool MathLive ) Intermediate: incorporates both the equation editor for those who wish to use it and a text box that uses a special Lurch notation. (Documentation for that notation is forthcoming! Until we've added it, just know that there is a significant overlap between Lurch notation and AsciiMath .) Advanced: for those who have mastered Lurch notation, a minimalist dialog that lets you stay in the flow of your document Is lurch grading my math now? No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#meaningful-mathematics","text":"","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#two-types-of-mathematical-content","text":"Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\"","title":"Two types of mathematical content"},{"location":"tut-03-meaningful-math/#why-two-types-of-math","text":"Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document.","title":"Why two types of math?"},{"location":"tut-03-meaningful-math/#important-details-about-expressions","text":"You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you want to) later. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. When adding or editing math expressions, you are not restricted to using only the equation editor. Under the Edit menu, find the Preferences option (all the way at the bottom---you may need to scroll down). In its \"Math content\" tab, you can select which type of expression editor to use, from these options: Beginner: the default you used above, a standard equation editor widget (thanks to the open-source tool MathLive ) Intermediate: incorporates both the equation editor for those who wish to use it and a text box that uses a special Lurch notation. (Documentation for that notation is forthcoming! Until we've added it, just know that there is a significant overlap between Lurch notation and AsciiMath .) Advanced: for those who have mastered Lurch notation, a minimalist dialog that lets you stay in the flow of your document","title":"Important details about expressions"},{"location":"tut-03-meaningful-math/#is-lurch-grading-my-math-now","text":"No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Is lurch grading my math now?"},{"location":"tut-03b-intermediate-mode/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-03b-intermediate-mode/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-03c-advanced-mode/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-03c-advanced-mode/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-04-validation/","text":"Validation (that is, Grading) Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"Validation (that is, Grading)"},{"location":"tut-04-validation/#validation-that-is-grading","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"Validation (that is, Grading)"},{"location":"tut-05-rules/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-05-rules/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-05b-metavariables/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-05b-metavariables/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-06-document-header/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-06-document-header/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07a-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07a-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07b-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07b-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07c-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07c-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07d-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-07d-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tutorial-toc/","text":"Lurch Tutorial This tutorial is for the Lurch application that is online here . Warning The app's documentation is not at all complete yet! It is just beginning! In fact, at this point, there is almost nothing here! There is only this tutorial, and it is far from complete. We are actively developing Lurch daily during Spring 2024, and if you check back often, you will find new documentation arriving regularly. Contents Here is the table of contents for the tutorial. It is a work in progress. Basics Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning (not yet written---coming soon!) Reading and using rules Defining axioms, rules, and more (not yet written---coming soon!) Hiding and showing rules (not yet written---coming soon!) Optional topics How rules are interpreted (not yet written---coming soon!) Intermediate mode editing (not yet written---coming soon!) Advanced mode editing (not yet written---coming soon!) Your first proofs Part 1: Propositional logic (not yet written---coming soon!) Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Tutorial"},{"location":"tutorial-toc/#lurch-tutorial","text":"This tutorial is for the Lurch application that is online here . Warning The app's documentation is not at all complete yet! It is just beginning! In fact, at this point, there is almost nothing here! There is only this tutorial, and it is far from complete. We are actively developing Lurch daily during Spring 2024, and if you check back often, you will find new documentation arriving regularly.","title":"Lurch Tutorial"},{"location":"tutorial-toc/#contents","text":"Here is the table of contents for the tutorial. It is a work in progress.","title":"Contents"},{"location":"tutorial-toc/#basics","text":"Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning (not yet written---coming soon!)","title":"Basics"},{"location":"tutorial-toc/#reading-and-using-rules","text":"Defining axioms, rules, and more (not yet written---coming soon!) Hiding and showing rules (not yet written---coming soon!)","title":"Reading and using rules"},{"location":"tutorial-toc/#optional-topics","text":"How rules are interpreted (not yet written---coming soon!) Intermediate mode editing (not yet written---coming soon!) Advanced mode editing (not yet written---coming soon!)","title":"Optional topics"},{"location":"tutorial-toc/#your-first-proofs","text":"Part 1: Propositional logic (not yet written---coming soon!) Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Your first proofs"}]}